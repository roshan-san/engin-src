/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as IndexImport } from './routes/index'
import { Route as ProtectedMessageImport } from './routes/_protected/message'
import { Route as ProtectedHomeImport } from './routes/_protected/home'
import { Route as ProtectedConnectImport } from './routes/_protected/connect'
import { Route as ProtectedStartupsIndexImport } from './routes/_protected/startups.index'
import { Route as ProtectedStartupsStartupidImport } from './routes/_protected/startups.$startupid'
import { Route as ProtectedProfileUsernameImport } from './routes/_protected/profile.$username'

// Create/Update Routes

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedMessageRoute = ProtectedMessageImport.update({
  id: '/message',
  path: '/message',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedHomeRoute = ProtectedHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedConnectRoute = ProtectedConnectImport.update({
  id: '/connect',
  path: '/connect',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedStartupsIndexRoute = ProtectedStartupsIndexImport.update({
  id: '/startups/',
  path: '/startups/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedStartupsStartupidRoute = ProtectedStartupsStartupidImport.update(
  {
    id: '/startups/$startupid',
    path: '/startups/$startupid',
    getParentRoute: () => ProtectedRoute,
  } as any,
)

const ProtectedProfileUsernameRoute = ProtectedProfileUsernameImport.update({
  id: '/profile/$username',
  path: '/profile/$username',
  getParentRoute: () => ProtectedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/_protected/connect': {
      id: '/_protected/connect'
      path: '/connect'
      fullPath: '/connect'
      preLoaderRoute: typeof ProtectedConnectImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/home': {
      id: '/_protected/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof ProtectedHomeImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/message': {
      id: '/_protected/message'
      path: '/message'
      fullPath: '/message'
      preLoaderRoute: typeof ProtectedMessageImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/profile/$username': {
      id: '/_protected/profile/$username'
      path: '/profile/$username'
      fullPath: '/profile/$username'
      preLoaderRoute: typeof ProtectedProfileUsernameImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/startups/$startupid': {
      id: '/_protected/startups/$startupid'
      path: '/startups/$startupid'
      fullPath: '/startups/$startupid'
      preLoaderRoute: typeof ProtectedStartupsStartupidImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/startups/': {
      id: '/_protected/startups/'
      path: '/startups'
      fullPath: '/startups'
      preLoaderRoute: typeof ProtectedStartupsIndexImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedConnectRoute: typeof ProtectedConnectRoute
  ProtectedHomeRoute: typeof ProtectedHomeRoute
  ProtectedMessageRoute: typeof ProtectedMessageRoute
  ProtectedProfileUsernameRoute: typeof ProtectedProfileUsernameRoute
  ProtectedStartupsStartupidRoute: typeof ProtectedStartupsStartupidRoute
  ProtectedStartupsIndexRoute: typeof ProtectedStartupsIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedConnectRoute: ProtectedConnectRoute,
  ProtectedHomeRoute: ProtectedHomeRoute,
  ProtectedMessageRoute: ProtectedMessageRoute,
  ProtectedProfileUsernameRoute: ProtectedProfileUsernameRoute,
  ProtectedStartupsStartupidRoute: ProtectedStartupsStartupidRoute,
  ProtectedStartupsIndexRoute: ProtectedStartupsIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/connect': typeof ProtectedConnectRoute
  '/home': typeof ProtectedHomeRoute
  '/message': typeof ProtectedMessageRoute
  '/profile/$username': typeof ProtectedProfileUsernameRoute
  '/startups/$startupid': typeof ProtectedStartupsStartupidRoute
  '/startups': typeof ProtectedStartupsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/connect': typeof ProtectedConnectRoute
  '/home': typeof ProtectedHomeRoute
  '/message': typeof ProtectedMessageRoute
  '/profile/$username': typeof ProtectedProfileUsernameRoute
  '/startups/$startupid': typeof ProtectedStartupsStartupidRoute
  '/startups': typeof ProtectedStartupsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_protected/connect': typeof ProtectedConnectRoute
  '/_protected/home': typeof ProtectedHomeRoute
  '/_protected/message': typeof ProtectedMessageRoute
  '/_protected/profile/$username': typeof ProtectedProfileUsernameRoute
  '/_protected/startups/$startupid': typeof ProtectedStartupsStartupidRoute
  '/_protected/startups/': typeof ProtectedStartupsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/connect'
    | '/home'
    | '/message'
    | '/profile/$username'
    | '/startups/$startupid'
    | '/startups'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/connect'
    | '/home'
    | '/message'
    | '/profile/$username'
    | '/startups/$startupid'
    | '/startups'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_protected/connect'
    | '/_protected/home'
    | '/_protected/message'
    | '/_protected/profile/$username'
    | '/_protected/startups/$startupid'
    | '/_protected/startups/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/connect",
        "/_protected/home",
        "/_protected/message",
        "/_protected/profile/$username",
        "/_protected/startups/$startupid",
        "/_protected/startups/"
      ]
    },
    "/_protected/connect": {
      "filePath": "_protected/connect.tsx",
      "parent": "/_protected"
    },
    "/_protected/home": {
      "filePath": "_protected/home.tsx",
      "parent": "/_protected"
    },
    "/_protected/message": {
      "filePath": "_protected/message.tsx",
      "parent": "/_protected"
    },
    "/_protected/profile/$username": {
      "filePath": "_protected/profile.$username.tsx",
      "parent": "/_protected"
    },
    "/_protected/startups/$startupid": {
      "filePath": "_protected/startups.$startupid.tsx",
      "parent": "/_protected"
    },
    "/_protected/startups/": {
      "filePath": "_protected/startups.index.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
