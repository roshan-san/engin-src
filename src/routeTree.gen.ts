/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as ProtectedImport } from "./routes/_protected";
import { Route as IndexImport } from "./routes/index";
import { Route as ProtectedTestImport } from "./routes/_protected/test";
import { Route as ProtectedStartupsImport } from "./routes/_protected/startups";
import { Route as ProtectedMessageImport } from "./routes/_protected/message";
import { Route as ProtectedDashboardImport } from "./routes/_protected/dashboard";
import { Route as ProtectedConnectImport } from "./routes/_protected/connect";
import { Route as ProtectedProfileUsernameImport } from "./routes/_protected/profile.$username";
import { Route as ProtectedMessageUsernameImport } from "./routes/_protected/message.$username";

// Create/Update Routes

const ProtectedRoute = ProtectedImport.update({
  id: "/_protected",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const ProtectedTestRoute = ProtectedTestImport.update({
  id: "/test",
  path: "/test",
  getParentRoute: () => ProtectedRoute,
} as any);

const ProtectedStartupsRoute = ProtectedStartupsImport.update({
  id: "/startups",
  path: "/startups",
  getParentRoute: () => ProtectedRoute,
} as any);

const ProtectedMessageRoute = ProtectedMessageImport.update({
  id: "/message",
  path: "/message",
  getParentRoute: () => ProtectedRoute,
} as any);

const ProtectedDashboardRoute = ProtectedDashboardImport.update({
  id: "/dashboard",
  path: "/dashboard",
  getParentRoute: () => ProtectedRoute,
} as any);

const ProtectedConnectRoute = ProtectedConnectImport.update({
  id: "/connect",
  path: "/connect",
  getParentRoute: () => ProtectedRoute,
} as any);

const ProtectedProfileUsernameRoute = ProtectedProfileUsernameImport.update({
  id: "/profile/$username",
  path: "/profile/$username",
  getParentRoute: () => ProtectedRoute,
} as any);

const ProtectedMessageUsernameRoute = ProtectedMessageUsernameImport.update({
  id: "/$username",
  path: "/$username",
  getParentRoute: () => ProtectedMessageRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/_protected": {
      id: "/_protected";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof ProtectedImport;
      parentRoute: typeof rootRoute;
    };
    "/_protected/connect": {
      id: "/_protected/connect";
      path: "/connect";
      fullPath: "/connect";
      preLoaderRoute: typeof ProtectedConnectImport;
      parentRoute: typeof ProtectedImport;
    };
    "/_protected/dashboard": {
      id: "/_protected/dashboard";
      path: "/dashboard";
      fullPath: "/dashboard";
      preLoaderRoute: typeof ProtectedDashboardImport;
      parentRoute: typeof ProtectedImport;
    };
    "/_protected/message": {
      id: "/_protected/message";
      path: "/message";
      fullPath: "/message";
      preLoaderRoute: typeof ProtectedMessageImport;
      parentRoute: typeof ProtectedImport;
    };
    "/_protected/startups": {
      id: "/_protected/startups";
      path: "/startups";
      fullPath: "/startups";
      preLoaderRoute: typeof ProtectedStartupsImport;
      parentRoute: typeof ProtectedImport;
    };
    "/_protected/test": {
      id: "/_protected/test";
      path: "/test";
      fullPath: "/test";
      preLoaderRoute: typeof ProtectedTestImport;
      parentRoute: typeof ProtectedImport;
    };
    "/_protected/message/$username": {
      id: "/_protected/message/$username";
      path: "/$username";
      fullPath: "/message/$username";
      preLoaderRoute: typeof ProtectedMessageUsernameImport;
      parentRoute: typeof ProtectedMessageImport;
    };
    "/_protected/profile/$username": {
      id: "/_protected/profile/$username";
      path: "/profile/$username";
      fullPath: "/profile/$username";
      preLoaderRoute: typeof ProtectedProfileUsernameImport;
      parentRoute: typeof ProtectedImport;
    };
  }
}

// Create and export the route tree

interface ProtectedMessageRouteChildren {
  ProtectedMessageUsernameRoute: typeof ProtectedMessageUsernameRoute;
}

const ProtectedMessageRouteChildren: ProtectedMessageRouteChildren = {
  ProtectedMessageUsernameRoute: ProtectedMessageUsernameRoute,
};

const ProtectedMessageRouteWithChildren =
  ProtectedMessageRoute._addFileChildren(ProtectedMessageRouteChildren);

interface ProtectedRouteChildren {
  ProtectedConnectRoute: typeof ProtectedConnectRoute;
  ProtectedDashboardRoute: typeof ProtectedDashboardRoute;
  ProtectedMessageRoute: typeof ProtectedMessageRouteWithChildren;
  ProtectedStartupsRoute: typeof ProtectedStartupsRoute;
  ProtectedTestRoute: typeof ProtectedTestRoute;
  ProtectedProfileUsernameRoute: typeof ProtectedProfileUsernameRoute;
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedConnectRoute: ProtectedConnectRoute,
  ProtectedDashboardRoute: ProtectedDashboardRoute,
  ProtectedMessageRoute: ProtectedMessageRouteWithChildren,
  ProtectedStartupsRoute: ProtectedStartupsRoute,
  ProtectedTestRoute: ProtectedTestRoute,
  ProtectedProfileUsernameRoute: ProtectedProfileUsernameRoute,
};

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "": typeof ProtectedRouteWithChildren;
  "/connect": typeof ProtectedConnectRoute;
  "/dashboard": typeof ProtectedDashboardRoute;
  "/message": typeof ProtectedMessageRouteWithChildren;
  "/startups": typeof ProtectedStartupsRoute;
  "/test": typeof ProtectedTestRoute;
  "/message/$username": typeof ProtectedMessageUsernameRoute;
  "/profile/$username": typeof ProtectedProfileUsernameRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "": typeof ProtectedRouteWithChildren;
  "/connect": typeof ProtectedConnectRoute;
  "/dashboard": typeof ProtectedDashboardRoute;
  "/message": typeof ProtectedMessageRouteWithChildren;
  "/startups": typeof ProtectedStartupsRoute;
  "/test": typeof ProtectedTestRoute;
  "/message/$username": typeof ProtectedMessageUsernameRoute;
  "/profile/$username": typeof ProtectedProfileUsernameRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/_protected": typeof ProtectedRouteWithChildren;
  "/_protected/connect": typeof ProtectedConnectRoute;
  "/_protected/dashboard": typeof ProtectedDashboardRoute;
  "/_protected/message": typeof ProtectedMessageRouteWithChildren;
  "/_protected/startups": typeof ProtectedStartupsRoute;
  "/_protected/test": typeof ProtectedTestRoute;
  "/_protected/message/$username": typeof ProtectedMessageUsernameRoute;
  "/_protected/profile/$username": typeof ProtectedProfileUsernameRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | ""
    | "/connect"
    | "/dashboard"
    | "/message"
    | "/startups"
    | "/test"
    | "/message/$username"
    | "/profile/$username";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | ""
    | "/connect"
    | "/dashboard"
    | "/message"
    | "/startups"
    | "/test"
    | "/message/$username"
    | "/profile/$username";
  id:
    | "__root__"
    | "/"
    | "/_protected"
    | "/_protected/connect"
    | "/_protected/dashboard"
    | "/_protected/message"
    | "/_protected/startups"
    | "/_protected/test"
    | "/_protected/message/$username"
    | "/_protected/profile/$username";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  ProtectedRoute: typeof ProtectedRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/connect",
        "/_protected/dashboard",
        "/_protected/message",
        "/_protected/startups",
        "/_protected/test",
        "/_protected/profile/$username"
      ]
    },
    "/_protected/connect": {
      "filePath": "_protected/connect.tsx",
      "parent": "/_protected"
    },
    "/_protected/dashboard": {
      "filePath": "_protected/dashboard.tsx",
      "parent": "/_protected"
    },
    "/_protected/message": {
      "filePath": "_protected/message.tsx",
      "parent": "/_protected",
      "children": [
        "/_protected/message/$username"
      ]
    },
    "/_protected/startups": {
      "filePath": "_protected/startups.tsx",
      "parent": "/_protected"
    },
    "/_protected/test": {
      "filePath": "_protected/test.tsx",
      "parent": "/_protected"
    },
    "/_protected/message/$username": {
      "filePath": "_protected/message.$username.tsx",
      "parent": "/_protected/message"
    },
    "/_protected/profile/$username": {
      "filePath": "_protected/profile.$username.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
