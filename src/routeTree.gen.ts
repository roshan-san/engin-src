/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as PImport } from './routes/_p'
import { Route as IndexImport } from './routes/index'
import { Route as PStartupsImport } from './routes/_p.startups'
import { Route as PProfileImport } from './routes/_p.profile'
import { Route as PMessageImport } from './routes/_p.message'
import { Route as PDashboardImport } from './routes/_p.dashboard'
import { Route as PConnectImport } from './routes/_p.connect'
import { Route as PStartupsStartupidImport } from './routes/_p.startups.$startupid'
import { Route as PProfileUsernameImport } from './routes/_p.profile.$username'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const PRoute = PImport.update({
  id: '/_p',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PStartupsRoute = PStartupsImport.update({
  id: '/startups',
  path: '/startups',
  getParentRoute: () => PRoute,
} as any)

const PProfileRoute = PProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => PRoute,
} as any)

const PMessageRoute = PMessageImport.update({
  id: '/message',
  path: '/message',
  getParentRoute: () => PRoute,
} as any)

const PDashboardRoute = PDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => PRoute,
} as any)

const PConnectRoute = PConnectImport.update({
  id: '/connect',
  path: '/connect',
  getParentRoute: () => PRoute,
} as any)

const PStartupsStartupidRoute = PStartupsStartupidImport.update({
  id: '/$startupid',
  path: '/$startupid',
  getParentRoute: () => PStartupsRoute,
} as any)

const PProfileUsernameRoute = PProfileUsernameImport.update({
  id: '/$username',
  path: '/$username',
  getParentRoute: () => PProfileRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_p': {
      id: '/_p'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_p/connect': {
      id: '/_p/connect'
      path: '/connect'
      fullPath: '/connect'
      preLoaderRoute: typeof PConnectImport
      parentRoute: typeof PImport
    }
    '/_p/dashboard': {
      id: '/_p/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof PDashboardImport
      parentRoute: typeof PImport
    }
    '/_p/message': {
      id: '/_p/message'
      path: '/message'
      fullPath: '/message'
      preLoaderRoute: typeof PMessageImport
      parentRoute: typeof PImport
    }
    '/_p/profile': {
      id: '/_p/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof PProfileImport
      parentRoute: typeof PImport
    }
    '/_p/startups': {
      id: '/_p/startups'
      path: '/startups'
      fullPath: '/startups'
      preLoaderRoute: typeof PStartupsImport
      parentRoute: typeof PImport
    }
    '/_p/profile/$username': {
      id: '/_p/profile/$username'
      path: '/$username'
      fullPath: '/profile/$username'
      preLoaderRoute: typeof PProfileUsernameImport
      parentRoute: typeof PProfileImport
    }
    '/_p/startups/$startupid': {
      id: '/_p/startups/$startupid'
      path: '/$startupid'
      fullPath: '/startups/$startupid'
      preLoaderRoute: typeof PStartupsStartupidImport
      parentRoute: typeof PStartupsImport
    }
  }
}

// Create and export the route tree

interface PProfileRouteChildren {
  PProfileUsernameRoute: typeof PProfileUsernameRoute
}

const PProfileRouteChildren: PProfileRouteChildren = {
  PProfileUsernameRoute: PProfileUsernameRoute,
}

const PProfileRouteWithChildren = PProfileRoute._addFileChildren(
  PProfileRouteChildren,
)

interface PStartupsRouteChildren {
  PStartupsStartupidRoute: typeof PStartupsStartupidRoute
}

const PStartupsRouteChildren: PStartupsRouteChildren = {
  PStartupsStartupidRoute: PStartupsStartupidRoute,
}

const PStartupsRouteWithChildren = PStartupsRoute._addFileChildren(
  PStartupsRouteChildren,
)

interface PRouteChildren {
  PConnectRoute: typeof PConnectRoute
  PDashboardRoute: typeof PDashboardRoute
  PMessageRoute: typeof PMessageRoute
  PProfileRoute: typeof PProfileRouteWithChildren
  PStartupsRoute: typeof PStartupsRouteWithChildren
}

const PRouteChildren: PRouteChildren = {
  PConnectRoute: PConnectRoute,
  PDashboardRoute: PDashboardRoute,
  PMessageRoute: PMessageRoute,
  PProfileRoute: PProfileRouteWithChildren,
  PStartupsRoute: PStartupsRouteWithChildren,
}

const PRouteWithChildren = PRoute._addFileChildren(PRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PRouteWithChildren
  '/register': typeof RegisterRoute
  '/connect': typeof PConnectRoute
  '/dashboard': typeof PDashboardRoute
  '/message': typeof PMessageRoute
  '/profile': typeof PProfileRouteWithChildren
  '/startups': typeof PStartupsRouteWithChildren
  '/profile/$username': typeof PProfileUsernameRoute
  '/startups/$startupid': typeof PStartupsStartupidRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PRouteWithChildren
  '/register': typeof RegisterRoute
  '/connect': typeof PConnectRoute
  '/dashboard': typeof PDashboardRoute
  '/message': typeof PMessageRoute
  '/profile': typeof PProfileRouteWithChildren
  '/startups': typeof PStartupsRouteWithChildren
  '/profile/$username': typeof PProfileUsernameRoute
  '/startups/$startupid': typeof PStartupsStartupidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_p': typeof PRouteWithChildren
  '/register': typeof RegisterRoute
  '/_p/connect': typeof PConnectRoute
  '/_p/dashboard': typeof PDashboardRoute
  '/_p/message': typeof PMessageRoute
  '/_p/profile': typeof PProfileRouteWithChildren
  '/_p/startups': typeof PStartupsRouteWithChildren
  '/_p/profile/$username': typeof PProfileUsernameRoute
  '/_p/startups/$startupid': typeof PStartupsStartupidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/register'
    | '/connect'
    | '/dashboard'
    | '/message'
    | '/profile'
    | '/startups'
    | '/profile/$username'
    | '/startups/$startupid'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/register'
    | '/connect'
    | '/dashboard'
    | '/message'
    | '/profile'
    | '/startups'
    | '/profile/$username'
    | '/startups/$startupid'
  id:
    | '__root__'
    | '/'
    | '/_p'
    | '/register'
    | '/_p/connect'
    | '/_p/dashboard'
    | '/_p/message'
    | '/_p/profile'
    | '/_p/startups'
    | '/_p/profile/$username'
    | '/_p/startups/$startupid'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PRoute: typeof PRouteWithChildren
  RegisterRoute: typeof RegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PRoute: PRouteWithChildren,
  RegisterRoute: RegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_p",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_p": {
      "filePath": "_p.tsx",
      "children": [
        "/_p/connect",
        "/_p/dashboard",
        "/_p/message",
        "/_p/profile",
        "/_p/startups"
      ]
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_p/connect": {
      "filePath": "_p.connect.tsx",
      "parent": "/_p"
    },
    "/_p/dashboard": {
      "filePath": "_p.dashboard.tsx",
      "parent": "/_p"
    },
    "/_p/message": {
      "filePath": "_p.message.tsx",
      "parent": "/_p"
    },
    "/_p/profile": {
      "filePath": "_p.profile.tsx",
      "parent": "/_p",
      "children": [
        "/_p/profile/$username"
      ]
    },
    "/_p/startups": {
      "filePath": "_p.startups.tsx",
      "parent": "/_p",
      "children": [
        "/_p/startups/$startupid"
      ]
    },
    "/_p/profile/$username": {
      "filePath": "_p.profile.$username.tsx",
      "parent": "/_p/profile"
    },
    "/_p/startups/$startupid": {
      "filePath": "_p.startups.$startupid.tsx",
      "parent": "/_p/startups"
    }
  }
}
ROUTE_MANIFEST_END */
